
% FACT: program(program_id, program_name, qualified_program_name, begin_annotation_id, end_annotation_id).
program(1, 'get_car_scores', 'get_car_scores', 1, 6).
program(2, 'get_car_scores', 'get_car_scores.get_car_scores', 1, 6).

% FACT: workflow(program_id).
workflow(1).

% FACT: function(program_id).

% FACT: has_subprogram(program_id, subprogram_id).
has_subprogram(1, 2).

% FACT: port(port_id, port_type, port_name, qualified_port_name, port_annotation_id, data_id).
port(1, 'in', 'predictand.matrix', 'get_car_scores<-predictand.matrix', 2, 1).
port(2, 'in', 'predictor.matrix', 'get_car_scores<-predictor.matrix', 3, 2).
port(3, 'out', 'list', 'get_car_scores->list', 4, 3).
port(4, 'in', 'predictand.matrix', 'get_car_scores.get_car_scores<-predictand.matrix', 2, 1).
port(5, 'in', 'predictor.matrix', 'get_car_scores.get_car_scores<-predictor.matrix', 3, 2).
port(6, 'out', 'list', 'get_car_scores.get_car_scores->list', 4, 3).

% FACT: port_alias(port_id, alias).
port_alias(3, 'carscores').
port_alias(6, 'carscores').

% FACT: port_uri_template(port_id, uri).

% FACT: has_in_port(block_id, port_id).
has_in_port(1, 1).
has_in_port(1, 2).
has_in_port(2, 4).
has_in_port(2, 5).

% FACT: has_out_port(block_id, port_id).
has_out_port(1, 3).
has_out_port(2, 6).

% FACT: data(data_id, data_name, qualified_data_name).
data(1, 'predictand.matrix', '[predictand.matrix]').
data(2, 'predictor.matrix', '[predictor.matrix]').
data(3, 'carscores', '[carscores]').

% FACT: channel(channel_id, data_id).
channel(1, 3).
channel(2, 1).
channel(3, 2).

% FACT: port_connects_to_channel(port_id, channel_id).
port_connects_to_channel(6, 1).
port_connects_to_channel(4, 2).
port_connects_to_channel(5, 3).

% FACT: inflow_connects_to_channel(port_id, channel_id).
inflow_connects_to_channel(1, 2).
inflow_connects_to_channel(2, 3).

% FACT: outflow_connects_to_channel(port_id, channel_id).
outflow_connects_to_channel(3, 1).

% FACT: uri_variable(uri_variable_id, variable_name, port_id).

% FACT: log_template(log_template_id, port_id, entry_template, log_annotation_id).

% FACT: log_template_variable(log_variable_id, variable_name, log_template_id).
